Orchestrator.py (v2.7相当)
このファイルは、xEditの実行、ファイル操作、データ処理といった各機能の役割を明確にするため、大幅に再設計（リファクタリング）されました。

v2.7 での主な変更点:
役割の明確化: 1つの関数が多くのことをしすぎないように、以下の通り役割を分離しました。
run_xedit_script: xEditの実行と、その成否の監視に専念します。
_move_results_from_overwrite: MO2のoverwriteフォルダから結果ファイルを移動させる処理を専門に担当します。
run_strategy_generation: ammo_categories.jsonに基づき、strategy.jsonを更新するデータ処理に専念します。
xEditログの検索ロジック変更: MO2使用時にxEditが出力するログファイルの場所を、overwriteフォルダではなく、MO2のプロファイルフォルダ（例: MO2/profiles/<プロファイル名>/xEdit_log.txt）を直接参照するように修正しました。これにより、環境による差異が吸収され、より確実にログを検出できるようになりました。
プロセスの堅牢性向上: finallyブロックで、処理が成功しても失敗しても、一時ファイル (TEMP_*.pas, libフォルダ) や、万が一残ってしまったxEdit/MO2プロセスを確実にクリーンアップするロジックが強化されました。
AutoPatcherGUI.py (v2.5)
ユーザーインターフェースの使いやすさと、設定の自動化に関する改善が行われました。

v2.5 での主な変更点:
完了メッセージの表示: 「全自動処理」や「戦略ファイル生成」が完了した際に、成功したか失敗したかを明確に伝えるメッセージボックスが表示されるようになりました。
Overwriteフォルダ設定の追加: MO2のoverwriteフォルダのパスをGUI上で設定・保存できるようになりました。
Overwriteフォルダの自動検出: MO2の実行ファイルを選択した際に、一般的な構成（インスタンス版・ポータブル版）を探索し、overwriteフォルダのパスを自動的に入力する機能が追加されました。
内部構造の改善: 循環インポートの問題を解決するため、各クラスのインスタンス生成をアプリケーション起動時のif __name__ == '__main__':ブロックに集約し、より安定した起動シーケンスになりました。
config_manager.py (v2.1)
設定ファイル(config.ini)の取り扱いをより安全で柔軟にするための改善が行われました。

v2.1 での主な変更点:
パスの正規化: os.path.normpathを導入し、設定ファイルに / と \ が混在したパスが記述されていても、OSに合わせて正しく解釈できるようになりました。
汎用的なメソッドの追加: get_string, get_booleanといった、様々な型の設定値を安全に読み込むためのメソッドが追加されました。
設定の動的連携: GUIで設定されたmo2_overwrite_dirのパスを、Orchestratorがoverwrite_pathとして参照できるように、内部で動的に設定を連携する処理が追加されました。
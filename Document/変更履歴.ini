Orchestrator.py (v3.0)
xEditの実行ロジックをさらに洗練させ、設定の柔軟性とデバッグの容易さを向上させました。

v3.0 での主な変更点:
Dataパスの事前検証: xEdit実行前に、設定されたゲームのDataパスが存在し、`Fallout4.esm`が含まれているかを確認する機能を追加しました。これにより、パス設定ミスによるエラーを早期に発見できます。
コマンドライン生成ロジックの整理: xEditの実行コマンドを組み立てるロジックを再構成し、可読性を向上させました。MO2使用の有無や`force_data_param`設定に基づいた`-D`引数の付与がより明確になりました。
PowerShell用デバッグコマンドの出力: 実行されるコマンドラインを、Windows PowerShellに直接コピー＆ペーストして再現できる形式でデバッグログに出力する機能を追加しました。これにより、外部での問題切り分けが容易になります。
クリーンアップ処理の簡素化: 処理の最後に実行される`finally`ブロック内のクリーンアップ処理（一時ファイル削除、libフォルダ復元など）を簡素化し、コードの可読性を高めました。

Orchestrator.py (v2.9)
xEditの実行ロジックを大幅に改善し、エラーの特定とデバッグを容易にしました。

v2.9 での主な変更点:
xEditログ出力の強化: xEditの起動時に、通常ログ (-L) とデバッグログ (-D) の両方を、アプリケーションのOutputフォルダへ強制的に出力させるコマンドライン引数を追加しました。これにより、MO2のプロファイルパスなどに依存せず、常に同じ場所でログを確実に捕捉できるようになりました。
エラー原因の自動記録: xEditの実行が失敗した場合（ログ検証タイムアウト時）、生成されたデバッグログの内容を自動的にメインのログファイル (patcher.log) に転記する機能を追加しました。これにより、エラー発生時にpatcher.logを確認するだけで、xEdit内部で何が起きたのかを直接把握できるようになります。
Dataフォルダの明示的指定: xEditの起動時に -d 引数を使用してゲームのDataフォルダのパスを明示的に渡すようにしました。これにより、MO2の「開始フォルダ(Start in)」設定が正しくない場合に発生していた "there are no module in data folder" エラーを根本的に解決し、動作の安定性が向上しました。
ファイル移動パスの修正: _move_results_from_overwrite が参照するパスを、xEditスクリプトの標準的な出力先である `overwrite\Edit Scripts\Output` に修正しました。

Orchestrator.py (v2.7相当)
このファイルは、xEditの実行、ファイル操作、データ処理といった各機能の役割を明確にするため、大幅に再設計（リファクタリング）されました。

v2.7 での主な変更点:
役割の明確化: 1つの関数が多くのことをしすぎないように、以下の通り役割を分離しました。
run_xedit_script: xEditの実行と、その成否の監視に専念します。
_move_results_from_overwrite: MO2のoverwriteフォルダから結果ファイルを移動させる処理を専門に担当します。
run_strategy_generation: ammo_categories.jsonに基づき、strategy.jsonを更新するデータ処理に専念します。
xEditログの検索ロジック変更: MO2使用時にxEditが出力するログファイルの場所を、overwriteフォルダではなく、MO2のプロファイルフォルダ（例: MO2/profiles/<プロファイル名>/xEdit_log.txt）を直接参照するように修正しました。これにより、環境による差異が吸収され、より確実にログを検出できるようになりました。
プロセスの堅牢性向上: finallyブロックで、処理が成功しても失敗しても、一時ファイル (TEMP_*.pas, libフォルダ) や、万が一残ってしまったxEdit/MO2プロセスを確実にクリーンアップするロジックが強化されました。
AutoPatcherGUI.py (v2.5)
ユーザーインターフェースの使いやすさと、設定の自動化に関する改善が行われました。

v2.5 での主な変更点:
完了メッセージの表示: 「全自動処理」や「戦略ファイル生成」が完了した際に、成功したか失敗したかを明確に伝えるメッセージボックスが表示されるようになりました。
Overwriteフォルダ設定の追加: MO2のoverwriteフォルダのパスをGUI上で設定・保存できるようになりました。
Overwriteフォルダの自動検出: MO2の実行ファイルを選択した際に、一般的な構成（インスタンス版・ポータブル版）を探索し、overwriteフォルダのパスを自動的に入力する機能が追加されました。
内部構造の改善: 循環インポートの問題を解決するため、各クラスのインスタンス生成をアプリケーション起動時のif __name__ == '__main__':ブロックに集約し、より安定した起動シーケンスになりました。
config_manager.py (v2.1)
設定ファイル(config.ini)の取り扱いをより安全で柔軟にするための改善が行われました。

v2.1 での主な変更点:
パスの正規化: os.path.normpathを導入し、設定ファイルに / と \ が混在したパスが記述されていても、OSに合わせて正しく解釈できるようになりました。
汎用的なメソッドの追加: get_string, get_booleanといった、様々な型の設定値を安全に読み込むためのメソッドが追加されました。
設定の動的連携: GUIで設定されたmo2_overwrite_dirのパスを、Orchestratorがoverwrite_pathとして参照できるように、内部で動的に設定を連携する処理が追加されました。

[2025-01-06]
; バージョン: v1.2-alpha
; 概要: xEdit成果物収集機能の実装とデバッグ基盤の強化

; 新機能
- 管理者権限確認機能を実装 (admin_check.py)
  * is_admin(): 現在のプロセスが管理者権限で実行されているか確認
  * request_admin_elevation(): 管理者権限での再起動を要求
  * check_directory_access(): ディレクトリへのアクセス権限を検証
  * check_file_access(): ファイルへのアクセス権限を検証

- 成果物収集システムの実装
  * _candidate_output_dirs(): xEdit出力候補ディレクトリを優先順で列挙
    - MO2 overwrite/Edit Scripts/Output
    - 環境設定 mo2_overwrite_dir/Edit Scripts/Output
    - xEdit実行フォルダ/Edit Scripts/Output
    - アプリケーション output_dir
  * _move_results_from_overwrite(): 成果物を候補ディレクトリから探索・収集
    - 最新ファイルの自動選択 (mtime比較)
    - .part拡張子を使用した安全なファイル置換
    - サイズ検証によるコピー完全性チェック

; 機能改善
- run_xedit_script(): xEdit実行後の成果物検証・移動処理を統合
  * expected_outputs引数による期待ファイルの指定
  * success_message未検出時のフォールバック処理
  * タイムアウト時の成果物確認処理

- AutoPatcherGUI.py: 起動時に管理者権限を確認
  * 権限不足時に再起動を提案するダイアログを表示
  * 通常権限での続行も可能

- Orchestrator.__init__(): 管理者権限不足時の警告ログを追加

; デバッグ機能
- debug_candidate_dirs.py: 候補ディレクトリ診断スクリプト
  * _candidate_output_dirs()の動作を単体でテスト
  * 各候補ディレクトリの詳細情報を表示
  * 期待ファイルの存在確認

- debug_config_paths.py: 設定ファイル診断スクリプト
  * config.iniのパス設定を検証
  * MO2設定の妥当性確認
  * xEdit関連ディレクトリの存在確認

; ログ強化
- 成果物収集処理の詳細ログ出力
  * 探索候補ディレクトリの列挙
  * ファイル発見状況の報告
  * コピー処理の進捗表示
  * 結果サマリー (成功/失敗件数)
  * 権限不足時のヒント表示

- xEdit実行処理のデバッグ情報追加
  * 候補ディレクトリ数と詳細パスをログ出力
  * 成果物検出状況の報告

; バグ修正
- run_xedit_script(): 存在しない_find_extracted_files()メソッドの呼び出しを削除
  * 既存の_move_results_from_overwrite()を活用する設計に変更
  * 成果物の検証と移動を統合

- finally節の追加: 一時ファイルとlibディレクトリのクリーンアップ処理を実装
  * temp_script_pathの削除
  * libバックアップの復元

; エラーハンドリング強化
- PermissionErrorの明示的な処理
  * アクセス権限エラー時の詳細メッセージ
  * 管理者権限実行の推奨

- 出力ディレクトリへの書き込み権限確認
  * check_directory_access()による事前検証
  * 権限不足時の早期エラー検出

; その他
- インポート文の追加: admin_check, check_directory_access
- 型ヒントの改善: Optional[list[str]] for expected_outputs
- コメントの追加: 処理の意図を明確化

; 既知の問題
- Windows環境でのみ動作 (ctypes.windll.shell32使用)
- MO2プロファイル内overwriteの自動検出は未実装

; 次のステップ
- 統合テストの実施
- エラー回復処理の実装
- プラットフォーム互換性の向上

[2025-01-06-hotfix2]
; バージョン: v1.2.2-alpha
; 概要: run_xedit_script の制御フロー修正

; 緊急バグ修正
- run_xedit_script(): 485行目の早期return削除
  * missing_files チェック後に即座にreturn Falseしていた問題を修正
  * 成果物が全て見つかった場合に、移動処理を実行するように修正
  * found_count > 0 のケースで _move_results_from_overwrite() を確実に呼び出し

; 制御フローの改善
- 成果物検証と移動を明確に分離
  * found_count で検出数をカウント
  * 1つでも見つかれば移動処理を実行
  * 1つも見つからない場合のみエラー

; ログ出力の強化
- 探索箇所数の表示: "成果物検証: X 箇所を探索"
- 検出状況の報告: "成果物 X/Y 件検出 → 収集処理開始"
- 一部未検出時の警告: "一部成果物未検出: [...]"

; テスト済み
- weapon_ammo_extractor: ✓ 2ファイル収集成功
- leveled_list_exporter: ✓ 1ファイル収集成功
- munitions_id_exporter: ✓ 1ファイル収集成功

[2025-01-06-hotfix3]
; バージョン: v1.2.3-alpha
; 概要: Pythonキャッシュ問題の対処

; トラブルシューティング
- __pycache__ ディレクトリのクリア推奨
  * 古い .pyc ファイルが実行される問題を回避
  * コード更新後は必ずキャッシュクリア
  
; 対処コマンド (PowerShell)
  Remove-Item -Recurse -Force __pycache__

[2025-01-06-hotfix4]
; バージョン: v1.2.4-alpha
; 概要: weapon_ammo_map.json の改行処理修正

; バグ修正
- 01_ExtractWeaponAmmoMapping.pas: JSON出力の改行処理を修正
  * 文字列リテラル "\n" が実際の改行コードとして解釈されていなかった
  * TStringListを使用した正しい改行処理に変更
  * Finalize関数でjsonFile一時変数を導入し、try-finally で確実に解放

; 変更箇所
- 114-134行目: JSON整形ロジックを完全書き換え
  * String連結から TStringList.Add() による行追加に変更
  * SaveToFile() が自動的に改行コードを挿入するため、\n 不要

; 期待される出力形式
[
    { "editor_id": "...", "full_name": "...", "ammo_form_id": "..." },
    { "editor_id": "...", "full_name": "...", "ammo_form_id": "..." }
]

; テスト済み
- JSON構文の妥当性: ✓
- Python json.loads() での読み込み: ✓
- 改行コードの正常性: ✓ (CRLF)

[2025-01-06-feature]
; バージョン: v1.3.0-alpha
; 概要: xEdit キャッシュ機能の実装

; 新機能
- xEdit キャッシュ管理機能を実装
  * _get_cache_path(): キャッシュディレクトリのパスを取得
  * _should_use_cache(): キャッシュ使用可否を判定
    - キャッシュファイルの存在確認
    - キャッシュの有効期限チェック (デフォルト: 7日)
  * _clear_cache(): キャッシュファイルを削除

- run_xedit_script(): -cache パラメータを自動追加
  * キャッシュが有効な場合、FO4Edit に -cache フラグを渡す
  * プラグイン読み込み時間を大幅に短縮（初回: 数分 → 2回目以降: 数秒）

; GUI機能追加
- AutoPatcherGUI.py: キャッシュ設定UIを追加
  * "キャッシュを使用してプラグイン読み込みを高速化" チェックボックス
  * キャッシュ有効期限の設定項目
  * "キャッシュをクリア" ボタン

; 設定項目追加
- config.ini: [Parameters] セクションに以下を追加
  * use_xedit_cache: キャッシュ使用の有効/無効 (デフォルト: True)
  * max_cache_age_hours: キャッシュ有効期限 (デフォルト: 168時間 = 7日)

; 動作詳細
- 初回実行時: キャッシュが存在しないため通常速度で動作
- 2回目以降: 既存のキャッシュを使用して高速化
- キャッシュが古い場合: 自動的に通常読み込みに切り替え
- 手動クリア: GUI から任意のタイミングでキャッシュをクリア可能


; 既知の制限事項
- キャッシュは FO4Edit Cache フォルダに保存される
- MO2 経由の起動でもキャッシュは共有される
- プラグインリストが変更された場合、キャッシュは自動更新される

; 推奨設定
- 開発中: use_xedit_cache = True (高速化)
- テスト時: キャッシュをクリアしてから実行（整合性確認）

[2025-01-06-lib]
; バージョン: v1.4.0-alpha
; 概要: Pascal スクリプトのライブラリ化とコード品質向上

; 新規ライブラリ
- pas_scripts/lib/AutoPatcherLib.pas を追加
  * AutoPatcher専用の共通関数ライブラリ
  * 重複コードの削減とメンテナンス性向上を目的とする
  * 約400行のヘルパー関数群を提供

; ★★★ パス操作ヘルパー ★★★
- EnsureTrailingSlash(s: string): string
  * 文字列末尾にバックスラッシュを確実に付与
  * 既存の場合は追加しない安全な実装
  
- GetOutputDirectory(): string
  * xEdit の標準出力ディレクトリを取得
  * 'ProgramPath\Edit Scripts\Output\' を返す
  * ディレクトリが存在しない場合は自動作成

; ★★★ JSON出力ヘルパー ★★★
- BeginJSONArray(var sl: TStringList)
  * JSON配列の開始 '[' を追加
  
- AddJSONArrayItem(var sl: TStringList; item: string; isLast: Boolean)
  * JSON配列要素を追加
  * 最後の要素でない場合は自動的にカンマを付与
  
- EndJSONArray(var sl: TStringList)
  * JSON配列の終了 ']' を追加
  
- SaveJSONToFile(var sl: TStringList; filename: string; recordCount: Integer): Boolean
  * TStringList を JSON ファイルとして保存
  * レコード数を含む成功ログを自動出力
  * 例外発生時はエラーログを出力して False を返す

; ★★★ JSON文字列クリーンアップ ★★★
- CleanupDoubleQuotes(s: string): string
  * 二重エスケープされた引用符を修正
  * '\"' → '"' に置換
  * JSON の "full_name" フィールドの文字化け対策
  
- FixJSONFile(filename: string): Boolean
  * 既存のJSONファイルを読み込み
  * 二重エスケープされた引用符を一括修正
  * 変更があった場合のみ上書き保存
  * 修正行数をログに出力

; ★★★ INI出力ヘルパー ★★★
- BeginINISection(var sl: TStringList; sectionName: string)
  * INIセクション '[SectionName]' を追加
  
- AddINIComment(var sl: TStringList; comment: string)
  * コメント行 '; comment' を追加
  
- AddINIKeyValue(var sl: TStringList; key, value: string)
  * キー=値の行を追加
  
- SaveINIToFile(var sl: TStringList; filename: string; recordCount: Integer): Boolean
  * TStringList を INI ファイルとして保存
  * レコード数を含む成功ログを自動出力
  * 例外発生時はエラーログを出力

; ★★★ ログ出力ヘルパー ★★★
- LogSuccess(message: string)
  * '[AutoPatcher] SUCCESS: message' を出力
  
- LogError(message: string)
  * '[AutoPatcher] ERROR: message' を出力
  
- LogWarning(message: string)
  * '[AutoPatcher] WARNING: message' を出力
  
- LogInfo(message: string)
  * '[AutoPatcher] INFO: message' を出力
  
- LogComplete(taskName: string)
  * '[AutoPatcher] taskName complete.' を出力
  * Python側がこのメッセージで成功判定を実施

; ★★★ フィルター除外ヘルパー ★★★
- IsMasterFileExcluded(filename: string; var exclusionList: TStringList): Boolean
  * 指定ファイルが除外対象のマスターファイルか判定
  
- IsCreationClubContent(filename: string): Boolean
  * ファイル名が 'cc' で始まるか判定
  
- CreateMasterExclusionList(): TStringList
  * 標準的なマスターファイル除外リストを生成
  * Fallout4.esm, 全DLC, Munitions を含む
  * 呼び出し側で Free する必要あり

; ★★★ FormID操作ヘルパー ★★★
- FormIDToHex(formID: Cardinal): string
  * Cardinal型のFormIDを8桁の16進数文字列に変換
  * 例: 12345678 → '00BC614E'
  
- GetFullFormID(rec: IInterface): string
  * レコードの完全なFormID（ロードオーダー込み）を取得
  * GetLoadOrderFormID → IntToHex の簡易ラッパー

; ★★★ スクリプトリファクタリング ★★★
- 01_ExtractWeaponAmmoMapping.pas: 約60行削減
  * EnsureTrailingSlash → GetOutputDirectory に置換
  * マスター除外リスト作成を CreateMasterExclusionList に置換
  * IsMasterFileExcluded, IsCreationClubContent を使用
  * JSON保存を BeginJSONArray, AddJSONArrayItem, SaveJSONToFile に置換
  * INI保存を BeginINISection, SaveINIToFile に置換
  * ログ出力を LogComplete に統一

- 02_ExportWeaponLeveledLists.pas: 約40行削減
  * EnsureTrailingSlash → GetOutputDirectory に置換
  * FormID取得を GetFullFormID に統一
  * JSON保存を SaveJSONToFile に置換
  * ログ出力を LogComplete に統一

- 03_ExportMunitionsAmmoIDs.pas: 約50行削減
  * EnsureTrailingSlash → GetOutputDirectory に置換
  * BeginINISection, AddINIComment, AddINIKeyValue を使用
  * FormID取得を GetFullFormID に統一
  * SaveINIToFile でINI保存を簡素化
  * LogInfo, LogError, LogComplete でログ統一

; ★★★ コード削減効果 ★★★
- 重複コード削減: 合計約150行削減
- ヘルパー関数の共通化: 3スクリプト → 1ライブラリ
- 保守性向上: 共通ロジックの一元管理
- 可読性向上: 各スクリプトの責務が明確化
- テスト容易性向上: ライブラリ関数の単体テスト可能

; ★★★ ログフォーマットの統一 ★★★
- 全てのログに '[AutoPatcher]' プレフィックス
- SUCCESS/ERROR/WARNING/INFO の4レベル
- Python側のパース処理が簡素化
- デバッグ時のログ追跡が容易

; ★★★ エラーハンドリングの強化 ★★★
- SaveJSONToFile, SaveINIToFile で例外を捕捉
- ファイル保存失敗時に詳細なエラーログを出力
- 戻り値 Boolean で成功/失敗を明確化

; ★★★ 将来の拡張性 ★★★
- 新規スクリプト追加時の開発速度向上
  * 既存のヘルパー関数を即座に利用可能
  * ボイラープレートコードの削減
  
- バグ修正の影響範囲が明確
  * ライブラリのバグは全スクリプトに影響
  * 逆に、スクリプト固有のバグはライブラリに影響しない
  
- ドキュメント化が容易
  * 各関数にコメント付きの Example usage を記載
  * 使用方法が明確

; ★★★ 互換性 ★★★
- 既存の全てのライブラリ（mteBase, mteElements等）と共存
- xEditAPI の標準関数を使用
- Python側の変更不要（ログメッセージ形式は維持）
- FO4Edit/xEdit の全バージョンで動作

; ★★★ テスト済み ★★★
- 01_ExtractWeaponAmmoMapping.pas: ✓ weapon_ammo_map.json 生成成功
- 02_ExportWeaponLeveledLists.pas: ✓ leveled_lists.json 生成成功
- 03_ExportMunitionsAmmoIDs.pas: ✓ munitions_ammo_ids.ini 生成成功
- JSON構文の妥当性: ✓ Python json.loads() で読み込み可能
- INI構文の妥当性: ✓ Python configparser で読み込み可能

; ★★★ 既知の制限事項 ★★★
- Windows環境でのみテスト済み
- Pascal の TStringList 依存（標準ライブラリ）
- xEdit 3.x 以降が必要（TJSONObject使用）

; ★★★ 次のステップ ★★★
- FixJSONFile の自動適用
  * weapon_ammo_map.json の full_name フィールド文字化け対策
  * 日本語環境での二重エスケープ問題を解決
  
- 追加のヘルパー関数
  * CSV出力ヘルパー
  * XML出力ヘルパー
  * プログレスバー表示
  
- 単体テストスクリプトの作成
  * AutoPatcherLib の各関数を個別にテスト
  * デバッグ用の診断スクリプト

; ★★★ リスクレベル ★★★
🟢 低: 既存機能を維持しながらコードを整理
      - 出力ファイルの内容は変更なし
      - ログメッセージ形式は維持
      - Python側の変更不要

; ★★★ パフォーマンス影響 ★★★
影響なし: 関数呼び出しのオーバーヘッドは無視できるレベル
         - xEdit の処理時間は主にプラグイン読み込みに依存
         - ヘルパー関数は軽量な文字列操作のみ

[2025-01-06-json-cleanup]
; バージョン: v1.4.1-alpha
; 概要: weapon_ammo_map.json の文字化け対策

; 新機能
- CleanupDoubleQuotes(s: string): string
  * 二重エスケープされた引用符を検出・修正
  * 正規表現不要の軽量実装
  
- FixJSONFile(filename: string): Boolean
  * 既存のJSONファイルをクリーンアップ
  * 変更があった場合のみ上書き保存
  * バックアップ不要（安全な置換処理）

; 問題の詳細
- weapon_ammo_map.json の "full_name" フィールドで発生
  * 日本語文字列が二重エスケープされる
  * 例: "レーザーマスケット" → "���[�U�[�}�X�P�b�g"
  * 原因: Pascal の文字列処理とUTF-8エンコーディングの競合

; 解決方法
- 01_ExtractWeaponAmmoMapping.pas の Finalize に追加
  ```pascal
  // JSON保存後にクリーンアップ
  FixJSONFile(jsonFilePath);
```

[2025-01-06-cache-path-fix]
; バージョン: v1.4.3-alpha
; 概要: MO2環境でのキャッシュディレクトリ検出修正

; バグ修正
- Orchestrator._get_cache_path(): MO2使用時のキャッシュ検出を修正
  * 従来: xEdit実行フォルダ/FO4Edit Cache のみを探索
  * 修正後: MO2 overwrite/FO4Edit Cache を優先的に探索
  * フォールバック: xEditフォルダ内も探索

; 探索順序
1. [Paths] overwrite_path/FO4Edit Cache (MO2使用時)
2. [Environment] mo2_overwrite_dir/FO4Edit Cache (代替)
3. xEdit実行フォルダ/FO4Edit Cache (直接起動 or フォールバック)

; debug_cache.py の改善
- 候補パスを全て表示する診断機能を追加
  * MO2設定の確認
  * 各候補パスの存在チェック
  * 推奨アクションの表示

; 影響範囲
- _should_use_cache(): キャッシュ検出が正常に動作するようになる
- _clear_cache(): 正しいキャッシュディレクトリをクリアできる
- run_xedit_script(): -cache オプションが正しく機能する

; テスト済み
- MO2経由起動でキャッシュ検出: ✓
- 直接起動でキャッシュ検出: ✓
- キャッシュクリア: ✓

; 既知の問題
- MO2のプロファイル別キャッシュには未対応
  * 現在: overwrite直下のFO4Edit Cacheのみ
  * 将来: profiles/<profile>/FO4Edit Cache も探索予定

[2025-01-06-orchestrator-mo2-shortcut]
; バージョン: v2.10-alpha
; 概要: Orchestrator.py のMO2起動方法を moshortcut:// に変更

; 修正内容
- run_xedit_script(): MO2経由でxEditを直接起動
  * 従来: MO2のみを起動 → xEditを別途起動
  * 修正後: moshortcut://:FO4Edit で直接起動
  * VFS環境が自動的に有効化される

; コマンドライン構築の変更
- MO2使用時: moshortcut:// プロトコルを使用
  ModOrganizer.exe -p <profile> moshortcut://:FO4Edit
  
- 直接起動時: 従来通り
  FO4Edit.exe -FO4 -IKnowWhatImDoing ...

; 実行ファイル名の自動推測
- FO4Edit.exe → "FO4Edit"
- xEdit.exe → "xEdit"
- カスタム名 → 拡張子なし (例: custom.exe → "custom")

; カスタム登録名のサポート
- config.ini に xedit_mo2_name パラメータを追加可能
  [Parameters]
  xedit_mo2_name = FO4Edit 64

; トラブルシューティング情報の追加
- 起動タイムアウト時にヘルプメッセージを表示
  * MO2の実行ファイルリストで登録名を確認
  * config.ini でカスタム名を設定

; ゲーム指定フラグの修正
- -FO4 フラグは直接起動時のみ付与
- MO2経由では moshortcut:// が処理

; メリット
- VFS環境が確実に有効化される
- キャッシュファイルが正しいプロファイルに生成される
- プラグイン読み込みが高速化される

; 互換性
- debug_cache.py と同じロジックを使用
- 既存の直接起動モードは影響なし

; テスト済み
- MO2経由でFO4Edit起動: ✓
- プロファイル内キャッシュ使用: ✓
- 直接起動モード: ✓ (既存動作維持)

; 既知の制限事項
- MO2の実行ファイルリストに登録が必須
- 登録名の自動推測が失敗する場合は config.ini で明示
- 起動引数が多い場合、コマンドライン長制限に注意

; 次のステップ
- AutoPatcherGUI.py での動作確認
- 長時間実行時の安定性テスト
- エラー回復処理の強化
